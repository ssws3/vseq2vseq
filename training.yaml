# Pretrained 2d diffusers model path.
pretrained_2d_model_path: "stabilityai/stable-diffusion-xl-base-1.0"

# Pretrained 3d diffusers model path.
pretrained_3d_model_path: "damo-vilab/text-to-video-ms-1.7b"

# Upgrade base modelscope model to new img2vid model
upgrade_model: False

# The folder where your training outputs will be placed
output_dir: "outputs/modelscope-seq2seq-test-3"

# Adds offset noise to training. Sese https://www.crosslabs.org/blog/diffusion-with-offset-noise
offset_noise_strength: 0.1
use_offset_noise: True

# Training data parameters
train_data:
  # The width and height in which you want your training data to be resized to.
  width: 256      
  height: 256

  # This will find the closest aspect ratio to your input width and height. 
  # For example, 512x512 width and height with a video of resolution 1280x720 will be resized to 512x256
  use_bucketing: True

  # How many frames to step when sampling from the video  
  frame_step: 4

  # The total number of frames to sample, included the ones for the conditioning
  n_sample_frames: 8

  # The minimum amount of conditioning frames to fetch from n_sample_frames
  min_conditioning_n_sample_frames: 4

  # The maximum amount of conditioning frames to fetch from n_sample_frames
  max_conditioning_n_sample_frames: 4

  # Should train only spatial_conv and .attentions layers
  train_only_images: False

  # If false file name will be the prompt, else the txt file
  text_file_as_prompt: False

  trainable_modules:
  - "conditioning_conv"
  - "conditioning_block"
  - "conditioning_attentions"
  #- "transformer_in"
  #- "temp_attentions"
  #- "temp_convs"
  #- "spatial_conv"
  #- ".attentions"
  
  # Folder containing all videos (prompt should be the file name, _ are automatically replaced to space characters) (sub folders are checked as well)
  path: "/home/polyware/webvid" # /home/polyware/Video-BLIP2-Preprocessor/outputs/hd #/home/polyware/modeltune/target_folder
  
  # Path to the deepspeed config file
  deepspeed_config_file: "deepspeed/stage-2.json"

# Validation data parameters.
sample_data:
  # A custom prompt that is different from your training dataset. 
  prompt: ""

  # The number of frames to sample during validation.
  num_frames: 8

  # Height and width of validation video
  width: 256
  height: 256

  # Height and width of validation sample image generator (not validation data video size), image gets resized to train_data width and height during diffusion
  image_width: 768
  image_height: 768

  # Fps rate for the sample video
  fps: 16

  # Number of inference steps when generating the video.
  num_inference_steps: 10

  # CFG scale
  guidance_scale: 25

# How many epochs to train for
epochs: 1

# How many steps to do before validating
train_dataset_size: 0.99 # 99% for training data, 1% for validation data. Modify this according to how big your train dataset is

# How many steps to do before validating
validation_steps: 100

# Save only the unet with lowest validation loss
save_only_best: True

# Save a checkpoint every x steps
checkpointing_steps: 500

# How many steps to do before sampling a preview
sample_steps: 10

# Seed for training.
seed: 42

# Resume from checkpoint
resume_from_checkpoint: False

# Resume from step
resume_step: 0

# Trades VRAM usage for speed. You lose roughly 20% of training speed, but save a lot of VRAM.
# If you need to save more VRAM, it can also be enabled for the text encoder, but reduces speed x2.
gradient_checkpointing: True

# Xformers must be installed for best memory savings and performance (< Pytorch 2.0)
enable_xformers_memory_efficient_attention: False

# Use scaled dot product attention (Only available with >= Torch 2.0)
enable_torch_2_attn: True
